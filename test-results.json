{"protocolVersion":"0.1.1","runnerVersion":null,"pid":1041882,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"/home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading /home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1}
{"suite":{"id":2,"platform":"vm","path":"/home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"suite","time":6}
{"test":{"id":3,"name":"loading /home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7}
{"suite":{"id":4,"platform":"vm","path":"/home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"suite","time":7}
{"test":{"id":5,"name":"loading /home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":7}
{"suite":{"id":6,"platform":"vm","path":"/home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart"},"type":"suite","time":9}
{"test":{"id":7,"name":"loading /home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":9}
{"count":4,"time":9,"type":"allSuites"}

[{"event":"test.startedProcess","params":{"vmServiceUri":"http://127.0.0.1:44567/_4YSATdZUME=/","observatoryUri":"http://127.0.0.1:44567/_4YSATdZUME=/"}}]
{"testID":1,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":3520}
{"group":{"id":8,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":3531}
{"group":{"id":9,"suiteID":0,"parentID":8,"name":"Session Model Tests","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":7,"column":3,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart"},"type":"group","time":3533}
{"test":{"id":10,"name":"Session Model Tests Session creation test","suiteID":0,"groupIDs":[8,9],"metadata":{"skip":false,"skipReason":null},"line":18,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart"},"type":"testStart","time":3533}
{"testID":10,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3605}
{"test":{"id":11,"name":"Session Model Tests Session toJson/fromJson serialization","suiteID":0,"groupIDs":[8,9],"metadata":{"skip":false,"skipReason":null},"line":37,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart"},"type":"testStart","time":3606}
{"testID":11,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3628}
{"test":{"id":12,"name":"Session Model Tests Session score calculation","suiteID":0,"groupIDs":[8,9],"metadata":{"skip":false,"skipReason":null},"line":79,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/session_test.dart"},"type":"testStart","time":3629}
{"testID":12,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3646}

[{"event":"test.startedProcess","params":{"vmServiceUri":"http://127.0.0.1:45055/SI-lxI9W63w=/","observatoryUri":"http://127.0.0.1:45055/SI-lxI9W63w=/"}}]
{"testID":3,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":4493}
{"group":{"id":13,"suiteID":2,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":4494}
{"group":{"id":14,"suiteID":2,"parentID":13,"name":"Participant Model Tests","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":5,"column":3,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"group","time":4494}
{"test":{"id":15,"name":"Participant Model Tests Participant creation test","suiteID":2,"groupIDs":[13,14],"metadata":{"skip":false,"skipReason":null},"line":6,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"testStart","time":4495}
{"testID":15,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4563}
{"test":{"id":16,"name":"Participant Model Tests Participant toJson/fromJson serialization","suiteID":2,"groupIDs":[13,14],"metadata":{"skip":false,"skipReason":null},"line":20,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"testStart","time":4565}
{"testID":16,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4574}
{"test":{"id":17,"name":"Participant Model Tests ShotRecord creation and serialization","suiteID":2,"groupIDs":[13,14],"metadata":{"skip":false,"skipReason":null},"line":40,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"testStart","time":4575}
{"testID":17,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4588}
{"test":{"id":18,"name":"Participant Model Tests Score creation and calculation","suiteID":2,"groupIDs":[13,14],"metadata":{"skip":false,"skipReason":null},"line":68,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/models/participant_test.dart"},"type":"testStart","time":4589}
{"testID":18,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":4599}

[{"event":"test.startedProcess","params":{"vmServiceUri":"http://127.0.0.1:43025/cl8oYlYPVQM=/","observatoryUri":"http://127.0.0.1:43025/cl8oYlYPVQM=/"}}]
{"testID":5,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":5657}
{"group":{"id":19,"suiteID":4,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":null,"column":null,"url":null},"type":"group","time":5658}
{"group":{"id":20,"suiteID":4,"parentID":19,"name":"SessionsProvider Tests","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":10,"column":3,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"group","time":5659}
{"test":{"id":21,"name":"SessionsProvider Tests addSession should add a new session","suiteID":4,"groupIDs":[19,20],"metadata":{"skip":false,"skipReason":null},"line":51,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"testStart","time":5659}
{"testID":21,"messageType":"print","message":"=== LOAD EXAMENS: DÃ©but du chargement des examens","type":"print","time":5713}
{"testID":21,"messageType":"print","message":"=== SAVE EXAMENS: Sauvegarde de 1 examens","type":"print","time":5744}
{"testID":21,"messageType":"print","message":"=== SAVE SESSIONS: Preparing to save 1 sessions","type":"print","time":5754}
{"testID":21,"messageType":"print","message":"Error loading participants: Binding has not yet been initialized.","type":"print","time":5792}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5793}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5793}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5794}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5794}
{"testID":21,"messageType":"print","message":"=== ERROR saving examens: Binding has not yet been initialized.","type":"print","time":5795}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5795}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5796}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5796}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5797}
{"testID":21,"messageType":"print","message":"Error saving participants: Binding has not yet been initialized.","type":"print","time":5798}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5798}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5799}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5801}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5801}
{"testID":21,"messageType":"print","message":"Error saving participants: Binding has not yet been initialized.","type":"print","time":5806}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5807}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5807}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5807}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5807}
{"testID":21,"messageType":"print","message":"=== ERROR loading examens: Binding has not yet been initialized.","type":"print","time":5807}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5808}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5808}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5809}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5809}
{"testID":21,"messageType":"print","message":"=== LOAD EXAMENS: Chargement terminÃ© avec 1 examens disponibles","type":"print","time":5810}
{"testID":21,"messageType":"print","message":"=== ERROR saving sessions: Binding has not yet been initialized.","type":"print","time":5813}
{"testID":21,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5813}
{"testID":21,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5814}
{"testID":21,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5814}
{"testID":21,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5814}
{"testID":21,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5823}
{"test":{"id":22,"name":"SessionsProvider Tests updateSession should modify an existing session","suiteID":4,"groupIDs":[19,20],"metadata":{"skip":false,"skipReason":null},"line":75,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"testStart","time":5824}
{"testID":22,"messageType":"print","message":"=== LOAD EXAMENS: DÃ©but du chargement des examens","type":"print","time":5830}
{"testID":22,"messageType":"print","message":"=== SAVE EXAMENS: Sauvegarde de 1 examens","type":"print","time":5831}
{"testID":22,"messageType":"print","message":"=== SAVE SESSIONS: Preparing to save 1 sessions","type":"print","time":5834}
{"testID":22,"messageType":"print","message":"=== SAVE SESSIONS: Preparing to save 1 sessions","type":"print","time":5836}
{"testID":22,"messageType":"print","message":"Error loading participants: Binding has not yet been initialized.","type":"print","time":5837}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5838}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5838}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5838}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5839}
{"testID":22,"messageType":"print","message":"=== ERROR saving examens: Binding has not yet been initialized.","type":"print","time":5840}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5840}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5841}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5842}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5842}
{"testID":22,"messageType":"print","message":"Error saving participants: Binding has not yet been initialized.","type":"print","time":5843}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5843}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5844}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5844}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5845}
{"testID":22,"messageType":"print","message":"Error saving participants: Binding has not yet been initialized.","type":"print","time":5846}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5847}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5848}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5848}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5849}
{"testID":22,"messageType":"print","message":"=== ERROR loading examens: Binding has not yet been initialized.","type":"print","time":5850}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5851}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5851}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5852}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5852}
{"testID":22,"messageType":"print","message":"=== LOAD EXAMENS: Chargement terminÃ© avec 1 examens disponibles","type":"print","time":5853}
{"testID":22,"messageType":"print","message":"=== ERROR saving sessions: Binding has not yet been initialized.","type":"print","time":5854}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5855}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5855}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5856}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5857}
{"testID":22,"messageType":"print","message":"=== ERROR saving sessions: Binding has not yet been initialized.","type":"print","time":5858}
{"testID":22,"messageType":"print","message":"The \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.","type":"print","time":5858}
{"testID":22,"messageType":"print","message":"Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.","type":"print","time":5859}
{"testID":22,"messageType":"print","message":"In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.","type":"print","time":5859}
{"testID":22,"messageType":"print","message":"If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.","type":"print","time":5859}
{"testID":22,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5862}
{"test":{"id":23,"name":"SessionsProvider Tests deleteSession should remove a session","suiteID":4,"groupIDs":[19,20],"metadata":{"skip":false,"skipReason":null},"line":111,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"testStart","time":5863}
{"testID":23,"messageType":"print","message":"=== LOAD EXAMENS: DÃ©but du chargement des examens","type":"print","time":5868}
{"testID":23,"messageType":"print","message":"=== SAVE EXAMENS: Sauvegarde de 1 examens","type":"print","time":5869}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5876}
{"test":{"id":24,"name":"SessionsProvider Tests addScore should add a score to a session","suiteID":4,"groupIDs":[19,20],"metadata":{"skip":false,"skipReason":null},"line":134,"column":5,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/providers/sessions_provider_test.dart"},"type":"testStart","time":5876}
{"testID":24,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":5887}

[{"event":"test.startedProcess","params":{"vmServiceUri":"http://127.0.0.1:35083/7grMIYq1_zI=/","observatoryUri":"http://127.0.0.1:35083/7grMIYq1_zI=/"}}]
{"testID":7,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":6946}
{"group":{"id":25,"suiteID":6,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":null,"column":null,"url":null},"type":"group","time":6947}
{"group":{"id":26,"suiteID":6,"parentID":25,"name":"HomeScreen Widget Tests","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":11,"column":3,"url":"file:///home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart"},"type":"group","time":6947}
{"test":{"id":27,"name":"HomeScreen Widget Tests HomeScreen should render correctly","suiteID":6,"groupIDs":[25,26],"metadata":{"skip":false,"skipReason":null},"line":175,"column":5,"url":"package:flutter_test/src/widget_tester.dart","root_line":34,"root_column":5,"root_url":"file:///home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart"},"type":"testStart","time":6947}
{"testID":27,"messageType":"print","message":"=== LOAD EXAMENS: DÃ©but du chargement des examens","type":"print","time":6983}
{"testID":27,"messageType":"print","message":"=== SAVE EXAMENS: Sauvegarde de 1 examens","type":"print","time":7004}
{"testID":27,"messageType":"print","message":"âââ¡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK âââââââââââââââââââââââââââââââââââââââââââââââââââââ\nThe following assertion was thrown running a test:\npumpAndSettle timed out\n\nWhen the exception was thrown, this was the stack:\n#0      WidgetTester.pumpAndSettle.<anonymous closure> (package:flutter_test/src/widget_tester.dart:718:11)\n<asynchronous suspension>\n#1      TestAsyncUtils.guard.<anonymous closure> (package:flutter_test/src/test_async_utils.dart:130:27)\n<asynchronous suspension>\n#2      main.<anonymous closure>.<anonymous closure> (file:///home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart:50:7)\n<asynchronous suspension>\n#3      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:193:15)\n<asynchronous suspension>\n#4      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:1064:5)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided one frame from package:stack_trace)\n\nThe test description was:\n  HomeScreen should render correctly\nââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ","type":"print","time":14438}
{"testID":27,"error":"Test failed. See exception logs above.\nThe test description was: HomeScreen should render correctly","stackTrace":"","isFailure":false,"type":"error","time":14446}
{"testID":27,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":14457}
{"test":{"id":28,"name":"HomeScreen Widget Tests Test navigation to Sessions screen","suiteID":6,"groupIDs":[25,26],"metadata":{"skip":false,"skipReason":null},"line":175,"column":5,"url":"package:flutter_test/src/widget_tester.dart","root_line":62,"root_column":5,"root_url":"file:///home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart"},"type":"testStart","time":14458}
{"testID":27,"messageType":"print","message":"=== LOAD SESSIONS: DÃ©but du chargement des sessions","type":"print","time":14459}
{"testID":27,"messageType":"print","message":"=== LOAD SESSIONS: VÃ©rification de la disponibilitÃ© des examens","type":"print","time":14460}
{"testID":27,"messageType":"print","message":"=== LOAD SESSIONS: 1 examens disponibles: exam1","type":"print","time":14464}
{"testID":28,"messageType":"print","message":"=== LOAD EXAMENS: DÃ©but du chargement des examens","type":"print","time":14490}
{"testID":28,"messageType":"print","message":"=== SAVE EXAMENS: Sauvegarde de 1 examens","type":"print","time":14490}
{"testID":28,"messageType":"print","message":"âââ¡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK âââââââââââââââââââââââââââââââââââââââââââââââââââââ\nThe following StateError was thrown running a test:\nBad state: No element\n\nWhen the exception was thrown, this was the stack:\n#0      Iterable.first (dart:core/iterable.dart:663:7)\n#1      _FirstFinderMixin.filter (package:flutter_test/src/finders.dart:1340:28)\n#3      Iterable.isEmpty (dart:core/iterable.dart:560:33)\n#4      WidgetController._getElementPoint (package:flutter_test/src/controller.dart:2008:18)\n#5      WidgetController.getCenter (package:flutter_test/src/controller.dart:1861:12)\n#6      WidgetController.tap (package:flutter_test/src/controller.dart:1041:7)\n#7      main.<anonymous closure>.<anonymous closure> (file:///home/bzanetti/StudioProjects/shootingscore/test/widgets/home_screen_test.dart:84:20)\n<asynchronous suspension>\n#8      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:193:15)\n<asynchronous suspension>\n#9      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:1064:5)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided 2 frames from dart:async-patch and package:stack_trace)\n\nThe test description was:\n  Test navigation to Sessions screen\nââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ","type":"print","time":14744}
{"testID":28,"error":"Test failed. See exception logs above.\nThe test description was: Test navigation to Sessions screen","stackTrace":"","isFailure":false,"type":"error","time":14745}
{"testID":28,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":14746}
{"success":false,"type":"done","time":15398}
